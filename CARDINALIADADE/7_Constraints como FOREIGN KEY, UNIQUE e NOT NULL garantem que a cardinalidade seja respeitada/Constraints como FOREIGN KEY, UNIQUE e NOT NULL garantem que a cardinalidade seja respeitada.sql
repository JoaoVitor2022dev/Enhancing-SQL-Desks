 1. FOREIGN KEY â†’ Garante Relacionamentos VÃ¡lidos (1:N, 1:1)

A constraint FOREIGN KEY garante que uma chave estrangeira em uma tabela sÃ³ contenha valores que existam na tabela de referÃªncia, respeitando a cardinalidade do relacionamento.

ğŸ“Œ Exemplo: Relacionamento 1:N (Um cliente pode fazer vÃ¡rias compras, mas cada compra pertence a um Ãºnico cliente)



CREATE TABLE Cliente (
    id_cliente INT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL
);


CREATE TABLE Compra (
    id_compra INT PRIMARY KEY,
    id_cliente INT,
    data_compra DATE NOT NULL,
    FOREIGN KEY (id_cliente) REFERENCES Cliente(id_cliente) -- Garante que a compra pertence a um cliente vÃ¡lido
);

ğŸ”¹ ExplicaÃ§Ã£o:


A tabela Compra tem uma chave estrangeira (id_cliente) que faz referÃªncia a Cliente(id_cliente).
Isso impede que um registro na tabela Compra tenha um id_cliente que nÃ£o existe na tabela Cliente.
Assim, a cardinalidade 1:N Ã© respeitada (um cliente pode ter vÃ¡rias compras, mas cada compra pertence a um Ãºnico cliente).


ğŸ”¹ 2. UNIQUE â†’ Evita Duplicidade (1:1)

A constraint UNIQUE garante que um valor em determinada coluna nÃ£o se repita, sendo Ãºtil para garantir cardinalidade 1:1.

ğŸ“Œ Exemplo: Relacionamento 1:1 (Cada cliente pode ter no mÃ¡ximo um cartÃ£o de fidelidade)


CREATE TABLE CartaoFidelidade (
    id_cartao INT PRIMARY KEY,
    id_cliente INT UNIQUE, -- Um cliente pode ter no mÃ¡ximo um cartÃ£o
    data_emissao DATE NOT NULL,
    FOREIGN KEY (id_cliente) REFERENCES Cliente(id_cliente)
);

ğŸ”¹ ExplicaÃ§Ã£o:

A chave estrangeira (id_cliente) jÃ¡ garante que o cliente existe.
A constraint UNIQUE impede que o mesmo id_cliente apareÃ§a mais de uma vez na tabela CartaoFidelidade, garantindo que cada cliente sÃ³ tenha um cartÃ£o.
Isso respeita a cardinalidade 1:1.

ğŸ”¹ 3. NOT NULL â†’ Garante Obrigatoriedade de Valores
A constraint NOT NULL assegura que determinados campos nÃ£o podem ser nulos, evitando problemas na modelagem.

ğŸ“Œ Exemplo: Evitar que uma compra seja registrada sem um cliente associado


ALTER TABLE Compra
MODIFY COLUMN id_cliente INT NOT NULL;

ğŸ”¹ ExplicaÃ§Ã£o:

Agora, todas as compras devem obrigatoriamente estar associadas a um cliente.
Isso impede compras sem um id_cliente, garantindo a integridade da cardinalidade.

ğŸ”¥ Resumo:


Constraint	O que faz?	Quando usar?	Cardinalidade impactada
FOREIGN KEY	Garante que valores referenciem uma chave primÃ¡ria vÃ¡lida	Para criar relacionamentos entre tabelas	1:N e 1:1
UNIQUE	Impede valores duplicados em uma coluna	Para evitar mÃºltiplos registros com o mesmo valor	1:1
NOT NULL	Impede que uma coluna tenha valores nulos	Para garantir que certos campos sejam sempre preenchidos	1:N e 1:1
Essas constraints ajudam a garantir que o banco de dados respeite os relacionamentos corretamente, evitando inconsistÃªncias.

Se precisar de mais detalhes, me avise! ğŸš€